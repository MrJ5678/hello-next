{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/apple/lesson/hello-next/hello-apollo-next/components/PostUpvoter.js\",\n    _s = $RefreshSig$();\n\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useMutation } from '@apollo/react-hooks';\nvar UPDATE_POST_MUTATION = {\n  \"kind\": \"Document\",\n  \"definitions\": [{\n    \"kind\": \"OperationDefinition\",\n    \"operation\": \"mutation\",\n    \"name\": {\n      \"kind\": \"Name\",\n      \"value\": \"updatePost\"\n    },\n    \"variableDefinitions\": [{\n      \"kind\": \"VariableDefinition\",\n      \"variable\": {\n        \"kind\": \"Variable\",\n        \"name\": {\n          \"kind\": \"Name\",\n          \"value\": \"id\"\n        }\n      },\n      \"type\": {\n        \"kind\": \"NonNullType\",\n        \"type\": {\n          \"kind\": \"NamedType\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"ID\"\n          }\n        }\n      },\n      \"directives\": []\n    }, {\n      \"kind\": \"VariableDefinition\",\n      \"variable\": {\n        \"kind\": \"Variable\",\n        \"name\": {\n          \"kind\": \"Name\",\n          \"value\": \"votes\"\n        }\n      },\n      \"type\": {\n        \"kind\": \"NamedType\",\n        \"name\": {\n          \"kind\": \"Name\",\n          \"value\": \"Int\"\n        }\n      },\n      \"directives\": []\n    }],\n    \"directives\": [],\n    \"selectionSet\": {\n      \"kind\": \"SelectionSet\",\n      \"selections\": [{\n        \"kind\": \"Field\",\n        \"name\": {\n          \"kind\": \"Name\",\n          \"value\": \"updatePost\"\n        },\n        \"arguments\": [{\n          \"kind\": \"Argument\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"id\"\n          },\n          \"value\": {\n            \"kind\": \"Variable\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"id\"\n            }\n          }\n        }, {\n          \"kind\": \"Argument\",\n          \"name\": {\n            \"kind\": \"Name\",\n            \"value\": \"votes\"\n          },\n          \"value\": {\n            \"kind\": \"Variable\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"votes\"\n            }\n          }\n        }],\n        \"directives\": [],\n        \"selectionSet\": {\n          \"kind\": \"SelectionSet\",\n          \"selections\": [{\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"__typename\"\n            },\n            \"arguments\": [],\n            \"directives\": []\n          }, {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"id\"\n            },\n            \"arguments\": [],\n            \"directives\": []\n          }, {\n            \"kind\": \"Field\",\n            \"name\": {\n              \"kind\": \"Name\",\n              \"value\": \"votes\"\n            },\n            \"arguments\": [],\n            \"directives\": []\n          }]\n        }\n      }]\n    }\n  }],\n  \"loc\": {\n    \"start\": 0,\n    \"end\": 137,\n    \"source\": {\n      \"body\": \"\\n  mutation updatePost($id: ID!, $votes: Int) {\\n    updatePost(id: $id, votes: $votes) {\\n      __typename\\n      id\\n      votes\\n    }\\n  }\\n\",\n      \"name\": \"GraphQL request\",\n      \"locationOffset\": {\n        \"line\": 1,\n        \"column\": 1\n      }\n    }\n  }\n};\nexport default function PostUpvoter(_ref) {\n  _s();\n\n  var votes = _ref.votes,\n      id = _ref.id;\n\n  var _useMutation = useMutation(UPDATE_POST_MUTATION),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      updatePost = _useMutation2[0];\n\n  var upvotePost = function upvotePost() {\n    updatePost({\n      variables: {\n        id: id,\n        votes: votes + 1\n      },\n      optimisticResponse: {\n        __typename: 'Mutation',\n        updatePost: {\n          __typename: 'Post',\n          id: id,\n          votes: votes + 1\n        }\n      }\n    });\n  };\n\n  return __jsx(\"button\", {\n    onClick: function onClick() {\n      return upvotePost();\n    },\n    className: \"jsx-852540806\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, votes, __jsx(_JSXStyle, {\n    id: \"852540806\",\n    __self: this\n  }, \"button.jsx-852540806{background-color:transparent;border:1px solid #e4e4e4;color:#000;}button.jsx-852540806:active{background-color:transparent;}button.jsx-852540806:before{-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;border-color:transparent transparent #000000 transparent;border-style:solid;border-width:0 4px 6px 4px;content:'';height:0;margin-right:5px;width:0;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9hcHBsZS9sZXNzb24vaGVsbG8tbmV4dC9oZWxsby1hcG9sbG8tbmV4dC9jb21wb25lbnRzL1Bvc3RVcHZvdGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW9Da0IsQUFHd0MsQUFLQSxBQUdYLDZCQVBPLEFBSzNCLHlCQUphLFdBQ2IsTUFNMkQseURBQ3RDLG1CQUNRLDJCQUNoQixXQUNGLFNBQ1EsaUJBQ1QsUUFDViIsImZpbGUiOiIvVXNlcnMvYXBwbGUvbGVzc29uL2hlbGxvLW5leHQvaGVsbG8tYXBvbGxvLW5leHQvY29tcG9uZW50cy9Qb3N0VXB2b3Rlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZU11dGF0aW9uIH0gZnJvbSAnQGFwb2xsby9yZWFjdC1ob29rcydcbmltcG9ydCBncWwgZnJvbSAnZ3JhcGhxbC10YWcnXG5cbmNvbnN0IFVQREFURV9QT1NUX01VVEFUSU9OID0gZ3FsYFxuICBtdXRhdGlvbiB1cGRhdGVQb3N0KCRpZDogSUQhLCAkdm90ZXM6IEludCkge1xuICAgIHVwZGF0ZVBvc3QoaWQ6ICRpZCwgdm90ZXM6ICR2b3Rlcykge1xuICAgICAgX190eXBlbmFtZVxuICAgICAgaWRcbiAgICAgIHZvdGVzXG4gICAgfVxuICB9XG5gXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBvc3RVcHZvdGVyKHsgdm90ZXMsIGlkIH0pIHtcbiAgY29uc3QgW3VwZGF0ZVBvc3RdID0gdXNlTXV0YXRpb24oVVBEQVRFX1BPU1RfTVVUQVRJT04pXG5cbiAgY29uc3QgdXB2b3RlUG9zdCA9ICgpID0+IHtcbiAgICB1cGRhdGVQb3N0KHtcbiAgICAgIHZhcmlhYmxlczoge1xuICAgICAgICBpZCxcbiAgICAgICAgdm90ZXM6IHZvdGVzICsgMSxcbiAgICAgIH0sXG4gICAgICBvcHRpbWlzdGljUmVzcG9uc2U6IHtcbiAgICAgICAgX190eXBlbmFtZTogJ011dGF0aW9uJyxcbiAgICAgICAgdXBkYXRlUG9zdDoge1xuICAgICAgICAgIF9fdHlwZW5hbWU6ICdQb3N0JyxcbiAgICAgICAgICBpZCxcbiAgICAgICAgICB2b3Rlczogdm90ZXMgKyAxLFxuICAgICAgICB9LFxuICAgICAgfSxcbiAgICB9KVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHVwdm90ZVBvc3QoKX0+XG4gICAgICB7dm90ZXN9XG4gICAgICA8c3R5bGUganN4PntgXG4gICAgICAgIGJ1dHRvbiB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgI2U0ZTRlNDtcbiAgICAgICAgICBjb2xvcjogIzAwMDtcbiAgICAgICAgfVxuICAgICAgICBidXR0b246YWN0aXZlIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgICAgICAgfVxuICAgICAgICBidXR0b246YmVmb3JlIHtcbiAgICAgICAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XG4gICAgICAgICAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCAjMDAwMDAwIHRyYW5zcGFyZW50O1xuICAgICAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gICAgICAgICAgYm9yZGVyLXdpZHRoOiAwIDRweCA2cHggNHB4O1xuICAgICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICAgIGhlaWdodDogMDtcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgICAgICAgICB3aWR0aDogMDtcbiAgICAgICAgfVxuICAgICAgYH08L3N0eWxlPlxuICAgIDwvYnV0dG9uPlxuICApXG59XG4iXX0= */\\n/*@ sourceURL=/Users/apple/lesson/hello-next/hello-apollo-next/components/PostUpvoter.js */\"));\n}\n\n_s(PostUpvoter, \"eUfsmNIdGQ/SymKogYaesnqSCdg=\", false, function () {\n  return [useMutation];\n});\n\n_c = PostUpvoter;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostUpvoter\");","map":{"version":3,"sources":["/Users/apple/lesson/hello-next/hello-apollo-next/components/PostUpvoter.js"],"names":["useMutation","UPDATE_POST_MUTATION","PostUpvoter","votes","id","updatePost","upvotePost","variables","optimisticResponse","__typename"],"mappings":";;;;;;;;AAAA,SAASA,WAAT,QAA4B,qBAA5B;AAGA,IAAMC,oBAAoeAAe,SAASC,WAAT,OAAoC;AAAA;;AAAA,MAAbC,KAAa,QAAbA,KAAa;AAAA,MAANC,EAAM,QAANA,EAAM;;AAAA,qBAC5BJ,WAAW,CAACC,oBAAD,CADiB;AAAA;AAAA,MAC1CI,UAD0C;;AAGjD,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvBD,IAAAA,UAAU,CAAC;AACTE,MAAAA,SAAS,EAAE;AACTH,QAAAA,EAAE,EAAFA,EADS;AAETD,QAAAA,KAAK,EAAEA,KAAK,GAAG;AAFN,OADF;AAKTK,MAAAA,kBAAkB,EAAE;AAClBC,QAAAA,UAAU,EAAE,UADM;AAElBJ,QAAAA,UAAU,EAAE;AACVI,UAAAA,UAAU,EAAE,MADF;AAEVL,UAAAA,EAAE,EAAFA,EAFU;AAGVD,UAAAA,KAAK,EAAEA,KAAK,GAAG;AAHL;AAFM;AALX,KAAD,CAAV;AAcD,GAfD;;AAiBA,SACE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMG,UAAU,EAAhB;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,KADH;AAAA;AAAA;AAAA,wuFADF;AAyBD;;GA7CuBD,W;UACDF,W;;;KADCE,W","sourcesContent":["import { useMutation } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\n\nconst UPDATE_POST_MUTATION = gql`\n  mutation updatePost($id: ID!, $votes: Int) {\n    updatePost(id: $id, votes: $votes) {\n      __typename\n      id\n      votes\n    }\n  }\n`\n\nexport default function PostUpvoter({ votes, id }) {\n  const [updatePost] = useMutation(UPDATE_POST_MUTATION)\n\n  const upvotePost = () => {\n    updatePost({\n      variables: {\n        id,\n        votes: votes + 1,\n      },\n      optimisticResponse: {\n        __typename: 'Mutation',\n        updatePost: {\n          __typename: 'Post',\n          id,\n          votes: votes + 1,\n        },\n      },\n    })\n  }\n\n  return (\n    <button onClick={() => upvotePost()}>\n      {votes}\n      <style jsx>{`\n        button {\n          background-color: transparent;\n          border: 1px solid #e4e4e4;\n          color: #000;\n        }\n        button:active {\n          background-color: transparent;\n        }\n        button:before {\n          align-self: center;\n          border-color: transparent transparent #000000 transparent;\n          border-style: solid;\n          border-width: 0 4px 6px 4px;\n          content: '';\n          height: 0;\n          margin-right: 5px;\n          width: 0;\n        }\n      `}</style>\n    </button>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}